name: 易语言32位DLL（精准定位td/telegram）

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 明确指定已知路径（根据你的目录结构，telegram在td文件夹下）
      TARGET_PATH: "td/telegram"

    steps:
      - name: 检出源码（强制拉取td子模块）
        uses: actions/checkout@v4
        with:
          repository: tdlib/td  # 你的仓库地址
          submodules: recursive
          fetch-depth: 0
          lfs: true

      - name: 强制拉取td子模块（关键修复）
        run: |
          # 单独针对td文件夹的子模块进行强制更新（最可能藏着telegram）
          git submodule update --init --force td/
          git submodule update --init --force td/telegram/  # 直接指定telegram路径
          Write-Host "`n===== td文件夹下的结构 ====="
          Get-ChildItem -Path ./td -Recurse -Depth 2 | Select-Object FullName  # 输出td下的文件

      - name: 精准查找telegram/CMakeLists.txt
        run: |
          $targetCmake = "$env:TARGET_PATH/CMakeLists.txt"
          Write-Host "`n===== 检查目标路径：$targetCmake ====="
          
          if (Test-Path $targetCmake) {
            $cmakePath = (Resolve-Path $targetCmake).Path
            $telegramDir = Split-Path $cmakePath -Parent
            echo "CMAKE_PATH=$cmakePath" >> $env:GITHUB_ENV
            echo "TELEGRAM_DIR=$telegramDir" >> $env:GITHUB_ENV
            Write-Host "✅ 找到目标文件：$cmakePath"
          } else {
            # 输出td/telegram下的实际文件，帮你确认缺失原因
            Write-Host "`n===== td/telegram下的实际文件 ====="
            Get-ChildItem -Path ./td/telegram -ErrorAction SilentlyContinue | Select-Object Name
            throw "❌ 仍未找到$targetCmake！请查看上面的文件列表，确认该文件是否存在（可能子模块未拉取完整）"
          }

      - name: 生成.def文件（易语言适配）
        run: |
          $defPath = "$env:TELEGRAM_DIR\tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force

      - name: 修改td/telegram/CMakeLists.txt
        run: |
          $content = Get-Content $env:CMAKE_PATH -Raw
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          $content = $content -replace 'add_library\(tdjson SHARED .*\)', @"
          add_library(tdjson SHARED
              `$<TARGET_OBJECTS:tdjson_objects>
              td_json_client.cpp
              $env:TELEGRAM_DIR\tdjson.def
          )
          target_link_options(tdjson PRIVATE "/DEF:`${CMAKE_CURRENT_SOURCE_DIR}/tdjson.def")
          "@
          $content | Set-Content $env:CMAKE_PATH -Force

      - name: 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --no-print-usage

      - name: 配置编译
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ..

      - name: 编译DLL
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-easy-success
          path: ${{ env.BUILD_DIR }}/Release/*.dll
