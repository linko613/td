name: Build tdjson.dll (Fix CMake Parameter)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: 'C:\vcpkg'
      BUILD_DIR: 'build32'
      VCPKG_TAG: '2024.09.12'

    steps:
      - name: 检出TDLib源码（含子模块，确保CMakeLists.txt存在）
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'  # 关键：确保根目录有CMakeLists.txt

      - name: 缓存vcpkg依赖
        uses: actions/cache@v3
        id: cache-vcpkg
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/downloads
          key: vcpkg-x86-params-${{ env.VCPKG_TAG }}

      - name: 安装依赖（缓存未命中时）
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout tags/$env:VCPKG_TAG
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl[core]:x86-windows zlib:x86-windows --clean-after-build
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows

      - name: 缓存编译产物
        uses: actions/cache@v3
        id: cache-build
        with:
          path: ${{ env.BUILD_DIR }}
          key: tdjson-params-${{ github.sha }}

      - name: 配置+编译（单行CMake命令，避免参数拆分）
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # 核心：所有参数写在单行，带空格的参数用引号包裹，明确指定源码目录为..
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release "-DTD_JSON_CLIENT_API=__declspec(dllexport) __stdcall" -DCMAKE_C_FLAGS="/Gz" -DCMAKE_CXX_FLAGS="/Gz" ..
          # 编译并输出详细日志
          cmake --build . --config Release --parallel 4 --verbose
        timeout-minutes: 45

      - name: 检查目录结构（调试用）
        run: |
          Write-Host "build目录结构："
          Get-ChildItem -Path $env:BUILD_DIR -Recurse | Select-Object FullName

      - name: 验证tdjson.dll生成
        run: |
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          if (-not (Test-Path $dllPath)) {
            throw "tdjson.dll未生成，路径：$dllPath"
          }

      - name: 检查导出函数（确保stdcall）
        run: |
          $dumpbin = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\dumpbin.exe"
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          & $dumpbin /exports $dllPath | Select-String -Pattern "td_json_client_"

      - name: 复制依赖DLL
        run: |
          $vcpkgBin = "${{ env.VCPKG_ROOT }}\installed\x86-windows\bin"
          $outputDir = "$env:BUILD_DIR\Release"
          Copy-Item "$vcpkgBin\libcrypto-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\libssl-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\zlib1.dll" -Destination $outputDir -Force

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-win32-params-fixed
          path: ${{ env.BUILD_DIR }}/Release/*.dll
