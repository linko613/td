name: 编译 tdjson.dll（强制添加@后缀）

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      VCPKG_TAG: 2024.09.12
      DUMPBIN_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\dumpbin.exe

    steps:
      - name: 检出TDLib源码
        uses: actions/checkout@v4
        with:
          repository: tdlib/td
          submodules: recursive
          fetch-depth: 1

      - name: 强制修改源码，为导出函数添加__stdcall
        run: |
          # 定位td_json_client.h（导出函数声明文件）
          $headerPath = "td/telegram/td_json_client.h"
          if (-not (Test-Path $headerPath)) { throw "未找到td_json_client.h" }
          
          # 读取原文件内容
          $content = Get-Content $headerPath -Raw
          
          # 替换函数声明，添加__declspec(dllexport) __stdcall
          $content = $content -replace 'TD_JSON_CLIENT_API void \*td_json_client_create\(\)', 'TD_JSON_CLIENT_API __declspec(dllexport) __stdcall void *td_json_client_create()'
          $content = $content -replace 'TD_JSON_CLIENT_API void td_json_client_destroy\(void \*client\)', 'TD_JSON_CLIENT_API __declspec(dllexport) __stdcall void td_json_client_destroy(void *client)'
          $content = $content -replace 'TD_JSON_CLIENT_API void td_json_client_send\(void \*client, const char \*request\)', 'TD_JSON_CLIENT_API __declspec(dllexport) __stdcall void td_json_client_send(void *client, const char *request)'
          $content = $content -replace 'TD_JSON_CLIENT_API const char \*td_json_client_receive\(void \*client, double timeout\)', 'TD_JSON_CLIENT_API __declspec(dllexport) __stdcall const char *td_json_client_receive(void *client, double timeout)'
          $content = $content -replace 'TD_JSON_CLIENT_API const char \*td_json_client_execute\(void \*client, const char \*request\)', 'TD_JSON_CLIENT_API __declspec(dllexport) __stdcall const char *td_json_client_execute(void *client, const char *request)'
          
          # 写回修改后的内容
          $content | Set-Content $headerPath -Force
          Write-Host "✅ 已修改td_json_client.h，强制添加__stdcall"

      - name: 缓存vcpkg
        uses: actions/cache@v3
        id: cache-vcpkg
        with:
          path: ${{ env.VCPKG_ROOT }}
          key: vcpkg-tdjson-final-force

      - name: 安装vcpkg及依赖
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout tags/$env:VCPKG_TAG
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --no-print-usage

      - name: 清理并创建编译目录
        run: |
          if (Test-Path $env:BUILD_DIR) { Remove-Item -Recurse -Force $env:BUILD_DIR }
          mkdir -p $env:BUILD_DIR

      - name: 配置CMake（强制传递宏）
        run: |
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release `
            -DTD_JSON_CLIENT_API="__stdcall" `  # 确保宏生效
            -DCMAKE_CXX_FLAGS_Release="/Gz" `  # 仅tdjson目标用stdcall
            -DCMAKE_C_FLAGS_Release="/Gz" `
            ..

      - name: 编译tdjson（仅核心目标）
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose
          $dllPath = "Release\tdjson.dll"
          if (-not (Test-Path $dllPath)) { throw "tdjson.dll未生成" }

      - name: 最终验证@后缀
        run: |
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          $exports = & "$env:DUMPBIN_PATH" /exports $dllPath | Select-String "td_json_client_"
          if (-not $exports) { throw "未找到核心函数" }
          
          $hasStdcall = $exports | Select-String "@\d+" -Quiet
          if (-not $hasStdcall) {
            throw "❌ 仍无@后缀！导出：`n$exports"
          } else {
            Write-Host "✅ 成功！带@后缀的导出：`n$exports"
          }

      - name: 复制依赖
        run: |
          $outputDir = "$env:BUILD_DIR\Release"
          $vcpkgBin = "$env:VCPKG_ROOT\installed\x86-windows\bin"
          Copy-Item "$vcpkgBin\libcrypto-3.dll" $outputDir -Force
          Copy-Item "$vcpkgBin\libssl-3.dll" $outputDir -Force
          Copy-Item "$vcpkgBin\zlib1.dll" $outputDir -Force

      - name: 上传可用产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-with-atsign-final
          path: ${{ env.BUILD_DIR }}/Release/*.dll
