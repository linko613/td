name: 极简暴力版 - 只编译核心DLL
on: workflow_dispatch
jobs:
  build:
    runs-on: windows-latest
    steps:
      # 1. 仅检出必要代码
      - uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 1

      # 2. 强制拉取td子模块（避免文件缺失）
      - run: |
          git submodule sync td/
          git submodule update --init --force td/

      # 3. 手动创建所有缺失文件（不用Here-String，避免语法错）
      - run: |
          # 创建缺失的tdjson_export.h
          echo "#ifndef TDJSON_EXPORT_H" > td/telegram/tdjson_export.h
          echo "#define TDJSON_EXPORT_H" >> td/telegram/tdjson_export.h
          echo "#define TDJSON_EXPORT __declspec(dllexport)" >> td/telegram/tdjson_export.h
          echo "#endif" >> td/telegram/tdjson_export.h

          # 创建def文件
          echo "LIBRARY tdjson.dll" > td/telegram/tdjson.def
          echo "EXPORTS" >> td/telegram/tdjson.def
          echo "td_json_client_create@0" >> td/telegram/tdjson.def
          echo "td_json_client_destroy@4" >> td/telegram/tdjson.def
          echo "td_json_client_send@8" >> td/telegram/tdjson.def
          echo "td_json_client_receive@12" >> td/telegram/tdjson.def
          echo "td_json_client_execute@8" >> td/telegram/tdjson.def

          # 修正td_json_client.h的头文件引用
          (Get-Content td/telegram/td_json_client.h) -replace '#include "td/telegram/tdjson_export.h"', '#include "tdjson_export.h"' | Set-Content td/telegram/td_json_client.h
          (Get-Content td/telegram/td_json_client.h) -replace 'td_json_client', 'TDJSON_EXPORT __stdcall td_json_client' | Set-Content td/telegram/td_json_client.h

      # 4. 安装依赖（固定版本，避免冲突）
      - run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          git -C C:/vcpkg checkout 2024.09.12
          C:/vcpkg/bootstrap-vcpkg.bat
          C:/vcpkg/vcpkg install openssl:x86-windows zlib:x86-windows

      # 5. 极简CMake配置（只编译核心文件）
      - run: |
          mkdir build && cd build
          echo "cmake_minimum_required(VERSION 3.15)" > CMakeLists.txt
          echo "project(tdjson)" >> CMakeLists.txt
          echo "set(CMAKE_CXX_STANDARD 17)" >> CMakeLists.txt
          echo "set(CMAKE_BUILD_TYPE Release)" >> CMakeLists.txt
          echo "find_package(OpenSSL REQUIRED)" >> CMakeLists.txt
          echo "find_package(ZLIB REQUIRED)" >> CMakeLists.txt
          echo "add_library(tdjson SHARED ../td/telegram/td_json_client.cpp ../td/telegram/tdjson.def)" >> CMakeLists.txt
          echo "target_include_directories(tdjson PRIVATE .. ../td/telegram C:/vcpkg/installed/x86-windows/include)" >> CMakeLists.txt
          echo "target_link_libraries(tdjson PRIVATE OpenSSL::SSL OpenSSL::Crypto ZLIB::ZLIB ws2_32 Mswsock Crypt32)" >> CMakeLists.txt
          echo "target_link_options(tdjson PRIVATE /DEF:../td/telegram/tdjson.def /MACHINE:X86)" >> CMakeLists.txt

      # 6. 编译（只编译tdjson目标）
      - run: |
          cd build
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake .
          cmake --build . --config Release --target tdjson

      # 7. 上传产物（不管其他，生成就传）
      - uses: actions/upload-artifact@v4
        with:
          name: 最终极简版DLL
          path: build/Release/tdjson.dll
