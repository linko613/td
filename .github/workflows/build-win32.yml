name: 重构头文件 - 终极成功版
on: workflow_dispatch
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: 1. 检出仓库（完整拉取，确保生成文件存在）
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0
          lfs: true

      - name: 2. 强制拉取子模块+生成TDLib自动文件（关键！）
        run: |
          # 1. 深度拉取所有子模块（包括生成td_api.h的依赖）
          git submodule sync --recursive
          git submodule update --init --recursive --force
          # 2. 运行TDLib的生成脚本，确保td_api.h被创建（核心修复）
          cd td/generate
          php generate.php  # TDLib通过PHP生成td_api.h等文件
          cd ../../
          # 3. 验证关键文件是否存在
          $tdApiPath = "td/td/generate/auto/td/telegram/td_api.h"
          if (-not (Test-Path $tdApiPath)) {
            throw "❌ 未生成td_api.h，生成脚本执行失败"
          }
          Write-Host "✅ 找到td_api.h：$tdApiPath"

      - name: 3. 彻底修复td_json_client.h（手动改写，避免语法错）
        run: |
          $hPath = "td/telegram/td_json_client.h"
          $content = Get-Content $hPath -Raw
          # 核心：替换原有导出宏为正确格式，不重复添加dllexport
          # 原声明可能是：TD_JSON_CLIENT_API td_json_client* td_json_client_create();
          $content = $content -replace 'TD_JSON_CLIENT_API', '__declspec(dllexport) __stdcall'
          # 修正可能的语法残留（如多余空格、括号）
          $content = $content -replace '__stdcall +', '__stdcall '
          $content = $content -replace '\(\s*\)', '()'
          # 写回文件
          $content | Set-Content $hPath -Force
          Write-Host "✅ 修复td_json_client.h语法"

      - name: 4. 修复Client.h的td_api.h引用路径
        run: |
          $clientHPath = "td/telegram/Client.h"
          $content = Get-Content $clientHPath -Raw
          # 原引用是#include "td/telegram/td_api.h"，实际路径是../generate/auto/td/telegram/td_api.h
          $content = $content -replace '#include "td/telegram/td_api.h"', '#include "../td/generate/auto/td/telegram/td_api.h"'
          $content | Set-Content $clientHPath -Force
          Write-Host "✅ 修复Client.h的td_api.h引用"

      - name: 5. 创建def文件（仅用于符号导出，不依赖头文件）
        run: |
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content "td/telegram/tdjson.def" -Force

      - name: 6. 安装依赖
        run: |
          choco install gperf php -y  # 安装PHP（生成td_api.h需要）
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          git -C C:/vcpkg checkout 2024.09.12
          C:/vcpkg/bootstrap-vcpkg.bat
          C:/vcpkg/vcpkg install openssl:x86-windows zlib:x86-windows

      - name: 7. CMake配置（完整包含所有头文件路径）
        run: |
          mkdir build && cd build
          @"
          cmake_minimum_required(VERSION 3.15)
          project(tdjson)
          set(CMAKE_CXX_STANDARD 17)
          set(CMAKE_BUILD_TYPE Release)
          set(CMAKE_SYSTEM_PROCESSOR x86)

          find_package(OpenSSL REQUIRED)
          find_package(ZLIB REQUIRED)

          # 核心：添加所有必要头文件路径（包括生成的td_api.h目录）
          include_directories(
              ..
              ../td/telegram
              ../td/td/generate/auto  # 包含td_api.h所在的auto目录
              ../td/tdutils
              C:/vcpkg/installed/x86-windows/include
          )

          # 编译核心文件
          add_library(tdjson SHARED
              ../td/telegram/td_json_client.cpp
              ../td/telegram/tdjson.def
          )

          # 链接依赖
          target_link_libraries(tdjson PRIVATE
              OpenSSL::SSL
              OpenSSL::Crypto
              ZLIB::ZLIB
              ws2_32
              Mswsock
              Crypt32
          )

          # 强制32位和def文件
          target_link_options(tdjson PRIVATE
              /DEF:../td/telegram/tdjson.def
              /MACHINE:X86
          )
          "@ | Set-Content CMakeLists.txt -Force

      - name: 8. 编译
        run: |
          cd build
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake .
          cmake --build . --config Release --target tdjson --verbose

      - name: 9. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 最终成功DLL
          path: build/Release/tdjson.dll
