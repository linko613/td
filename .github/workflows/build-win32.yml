name: 彻底解决路径问题 - 易语言32位DLL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 彻底简化路径：仓库根目录直接包含所有文件（无嵌套td子目录）
      MAIN_CMAKE: CMakeLists.txt  # 仓库根目录的CMakeLists.txt
      TELEGRAM_SRC: telegram      # 仓库根目录下的telegram目录

    steps:
      - name: 1. 检出仓库（linko613/td）
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取子模块（最后一次）
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force
          # 打印仓库根目录所有文件（关键：让你看到实际结构）
          Write-Host "`n===== 仓库根目录文件列表 ====="
          Get-ChildItem -Path . | Select-Object Name

      - name: 3. 检查根目录CMakeLists.txt（最终路径）
        run: |
          if (-not (Test-Path $env:MAIN_CMAKE)) {
            # 打印所有可能的CMakeLists.txt位置
            Write-Host "`n===== 仓库中所有CMakeLists.txt的位置 ====="
            Get-ChildItem -Path . -Recurse -Filter "CMakeLists.txt" | Select-Object FullName
            throw "❌ 最后尝试：未找到$env:MAIN_CMAKE，请根据上面的列表修改MAIN_CMAKE"
          }
          Write-Host "✅ 找到根目录CMakeLists.txt：$env:MAIN_CMAKE"

      - name: 4. 检查telegram目录（根目录下）
        run: |
          if (-not (Test-Path $env:TELEGRAM_SRC)) {
            Write-Host "`n===== 仓库中所有子目录 ====="
            Get-ChildItem -Path . -Directory -Recurse | Select-Object FullName
            throw "❌ 未找到$env:TELEGRAM_SRC，请根据上面的列表修改TELEGRAM_SRC"
          }
          Write-Host "✅ 找到telegram目录：$env:TELEGRAM_SRC"

      - name: 5. 生成.def文件（根目录/telegram下）
        run: |
          $defPath = "$env:TELEGRAM_SRC/tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force
          echo "DEF_PATH=$defPath" >> $env:GITHUB_ENV

      - name: 6. 修改根目录CMakeLists.txt
        run: |
          $content = Get-Content $env:MAIN_CMAKE -Raw
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          $content = $content -replace '(add_library\(tdjson SHARED)(.*?)(\))', "`$1`$2`n    $env:DEF_PATH`$3"
          $content += "`ntarget_link_options(tdjson PRIVATE "/DEF:$env:DEF_PATH")`n"
          $content | Set-Content $env:MAIN_CMAKE -Force

      - name: 7. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 8. 配置编译（直接指向仓库根目录）
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release ..  # 源码目录是仓库根目录（..指向根目录）

      - name: 9. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 10. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 最终可用DLL
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
