name: 终极修复LNK2001 - 强制导出函数

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 核心文件路径（你的仓库实际位置）
      MAIN_CMAKE: ./CMakeLists.txt
      CORE_SRC: ./td/telegram/td_json_client.cpp  # 函数实现文件
      DEF_PATH: ./td/telegram/tdjson.def          # .def文件

    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取子模块
        run: |
          git submodule sync td/
          git submodule update --init --force td/
          git -C td/ submodule update --init --recursive --force

      - name: 3. 直接修改源码（强制添加导出标记）
        run: |
          # 编辑td_json_client.cpp，给每个函数添加导出和调用约定
          $content = Get-Content $env:CORE_SRC -Raw
          # 替换函数声明，确保导出并使用stdcall
          $content = $content -replace 'td_json_client_create\(\)', '__declspec(dllexport) void* __stdcall td_json_client_create()'
          $content = $content -replace 'td_json_client_destroy\(void \*client\)', '__declspec(dllexport) void __stdcall td_json_client_destroy(void *client)'
          $content = $content -replace 'td_json_client_send\(void \*client, const char \*request\)', '__declspec(dllexport) void __stdcall td_json_client_send(void *client, const char *request)'
          $content = $content -replace 'td_json_client_receive\(void \*client, double timeout\)', '__declspec(dllexport) const char* __stdcall td_json_client_receive(void *client, double timeout)'
          $content = $content -replace 'td_json_client_execute\(void \*client, const char \*request\)', '__declspec(dllexport) const char* __stdcall td_json_client_execute(void *client, const char *request)'
          $content | Set-Content $env:CORE_SRC -Force
          Write-Host "✅ 已在源码中添加导出标记和stdcall"

      - name: 4. 生成匹配的.def文件
        run: |
          $absDefPath = (Resolve-Path $env:DEF_PATH).Path -replace '\\', '/'
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $absDefPath -Force
          echo "DEF_ABS_PATH=$absDefPath" >> $env:GITHUB_ENV

      - name: 5. 修改CMakeLists.txt（强制关联实现文件）
        run: |
          $content = Get-Content $env:MAIN_CMAKE -Raw
          # 1. 确保td_json_client.cpp被添加到tdjson目标
          $coreAbs = (Resolve-Path $env:CORE_SRC).Path -replace '\\', '/'
          $content = $content -replace '(add_library\(tdjson SHARED)(.*?)(\))', "`$1`$2`n    $coreAbs`n    $env:DEF_ABS_PATH`$3"
          # 2. 移除可能冲突的导出宏定义
          $content = $content -replace 'add_definitions\(-DTD_JSON_CLIENT_API=.*?\)', ''
          # 3. 链接器强制使用.def
          $content += "`ntarget_link_options(tdjson PRIVATE /DEF:`"$env:DEF_ABS_PATH`")`n"
          $content | Set-Content $env:MAIN_CMAKE -Force
          Write-Host "✅ 已强制关联实现文件和.def"

      - name: 6. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 7. 配置编译
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release ..

      - name: 8. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 9. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 最终成功DLL
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
