name: 修正语法错误 - 最终编译版

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      CORE_SRC: td/telegram/td_json_client.cpp
      CORE_H: td/telegram/td_json_client.h
      MISSING_H: td/telegram/tdjson_export.h
      DEF_FILE: tdjson.def

    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取子模块
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force
          if (-not (Test-Path $env:CORE_SRC)) { throw "缺$env:CORE_SRC" }
          if (-not (Test-Path $env:CORE_H)) { throw "缺$env:CORE_H" }

      - name: 3. 手动创建tdjson_export.h（修正语法）
        run: |
          if (-not (Test-Path $env:MISSING_H)) {
            # 关键：@"必须在行尾，"@必须在行首，无任何空格
            @"
#ifndef TDJSON_EXPORT_H
#define TDJSON_EXPORT_H
#define TDJSON_EXPORT __declspec(dllexport)
#endif // TDJSON_EXPORT_H
"@ | Set-Content $env:MISSING_H -Force
            Write-Host "✅ 创建简化版$env:MISSING_H"
          }

      - name: 4. 创建独立CMake配置
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          @"
cmake_minimum_required(VERSION 3.15)
project(tdjson)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_SYSTEM_PROCESSOR x86)

find_package(OpenSSL REQUIRED)
find_package(ZLIB REQUIRED)

add_library(tdjson SHARED
    ../$env:CORE_SRC
    ../$env:DEF_FILE
)

target_include_directories(tdjson PRIVATE
    ..
    ../td/telegram
    ../td/tdutils
    ../td/td/generate/auto
    $ENV{VCPKG_ROOT}/installed/x86-windows/include
)

target_link_libraries(tdjson PRIVATE
    OpenSSL::SSL
    OpenSSL::Crypto
    ZLIB::ZLIB
    ws2_32
    Mswsock
    Crypt32
)

target_compile_definitions(tdjson PRIVATE
    _WINDLL
    NOMINMAX
    WIN32_LEAN_AND_MEAN
)
target_link_options(tdjson PRIVATE
    /DEF:../$env:DEF_FILE
    /MACHINE:X86
)
"@ | Set-Content CMakeLists.txt -Force

      - name: 5. 生成.def文件
        run: |
          cd $env:BUILD_DIR
          @"
LIBRARY tdjson.dll
EXPORTS
    td_json_client_create@0
    td_json_client_destroy@4
    td_json_client_send@8
    td_json_client_receive@12
    td_json_client_execute@8
"@ | Set-Content ../$env:DEF_FILE -Force

      - name: 6. 修正头文件引用
        run: |
          $hContent = Get-Content $env:CORE_H -Raw
          $hContent = $hContent -replace '#include "td/telegram/tdjson_export.h"', '#include "tdjson_export.h"'
          $hContent = $hContent -replace 'TD_JSON_EXPORT', 'TDJSON_EXPORT __stdcall'
          $hContent | Set-Content $env:CORE_H -Force

      - name: 7. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 8. 配置编译
        run: |
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            .

      - name: 9. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --parallel 4 --verbose

      - name: 10. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 语法修复后DLL
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
