name: Build tdjson.dll (Fix Stdcall Conflict)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: 'C:\vcpkg'
      BUILD_DIR: 'build32'
      VCPKG_TAG: '2024.09.12'

    steps:
      - name: 检出TDLib源码（含子模块）
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'  # 确保源码完整

      - name: 缓存vcpkg依赖
        uses: actions/cache@v3
        id: cache-vcpkg
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/downloads
          key: vcpkg-x86-conflict-${{ env.VCPKG_TAG }}

      - name: 安装依赖（缓存未命中时）
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout tags/$env:VCPKG_TAG
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl[core]:x86-windows zlib:x86-windows --clean-after-build
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows

      - name: 缓存编译产物
        uses: actions/cache@v3
        id: cache-build
        with:
          path: ${{ env.BUILD_DIR }}
          key: tdjson-conflict-${{ github.sha }}

      - name: 配置+编译（仅导出函数用stdcall，移除全局强制）
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # 关键修改：1. 移除全局/Gz选项 2. 确保TD_JSON_CLIENT_API宏传递给tdjson目标
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release "-DTD_JSON_CLIENT_API=__declspec(dllexport) __stdcall" ..
          # 编译tdjson目标（优先编译核心DLL，避免无关目标报错）
          cmake --build . --config Release --parallel 4 --target tdjson --verbose
        timeout-minutes: 45

      - name: 检查tdjson.dll是否生成
        run: |
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          if (-not (Test-Path $dllPath)) {
            throw "tdjson.dll未生成，路径：$dllPath"
          } else {
            Write-Host "✅ tdjson.dll生成成功"
          }

      - name: 验证导出函数（确保带@后缀，stdcall生效）
        run: |
          $dumpbin = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\dumpbin.exe"
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          $exports = & $dumpbin /exports $dllPath | Select-String -Pattern "td_json_client_"
          if (-not $exports) {
            throw "❌ 未找到td_json_client_系列导出函数"
          }
          # 检查是否带@后缀（stdcall标志）
          $hasStdcall = $exports | Select-String -Pattern "@\d+" -Quiet
          if ($hasStdcall) {
            Write-Host "✅ 导出函数带@后缀，stdcall生效：`n$exports"
          } else {
            Write-Warning "⚠️  导出函数无@后缀，需确认调用约定"
          }

      - name: 复制依赖DLL
        run: |
          $vcpkgBin = "${{ env.VCPKG_ROOT }}\installed\x86-windows\bin"
          $outputDir = "$env:BUILD_DIR\Release"
          Copy-Item "$vcpkgBin\libcrypto-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\libssl-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\zlib1.dll" -Destination $outputDir -Force

      - name: 上传最终产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-win32-stdcall-fixed
          path: ${{ env.BUILD_DIR }}/Release/*.dll
