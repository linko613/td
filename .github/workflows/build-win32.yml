name: 易语言32位DLL（手动克隆td子模块）

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # TDLib官方仓库地址（直接克隆，绕开子模块问题）
      TD_REPO: https://github.com/tdlib/td.git
      TD_DIR: td  # 目标目录：根目录下的td文件夹

    steps:
      - name: 检出主项目源码
        uses: actions/checkout@v4
        with:
          # 只拉取主项目，暂时忽略子模块（因为子模块拉取失败）
          submodules: false
          fetch-depth: 1

      - name: 手动删除旧td目录（如果存在）
        run: |
          if (Test-Path $env:TD_DIR) {
            Remove-Item -Recurse -Force $env:TD_DIR
            Write-Host "已删除旧的$env:TD_DIR目录"
          }

      - name: 手动克隆td子模块（关键步骤）
        run: |
          Write-Host "开始手动克隆td子模块到$env:TD_DIR..."
          git clone $env:TD_REPO $env:TD_DIR
          # 切换到最新稳定版（避免开发分支问题）
          git -C $env:TD_DIR checkout v1.8.55
          # 拉取td自身的子模块（telegram模块在这里面）
          git -C $env:TD_DIR submodule update --init --recursive --force
          Write-Host "`n===== 克隆后td/telegram目录结构 ====="
          Get-ChildItem -Path "$env:TD_DIR/telegram" -Recurse -Depth 1 | Select-Object FullName

      - name: 确认telegram/CMakeLists.txt存在
        run: |
          $cmakePath = "$env:TD_DIR/telegram/CMakeLists.txt"
          if (-not (Test-Path $cmakePath)) {
            throw "❌ 手动克隆后仍未找到$cmakePath！可能TDLib仓库结构变更，请检查官方仓库"
          }
          echo "CMAKE_PATH=$cmakePath" >> $env:GITHUB_ENV
          echo "TELEGRAM_DIR=$env:TD_DIR/telegram" >> $env:GITHUB_ENV
          Write-Host "✅ 确认存在：$cmakePath"

      - name: 生成.def文件（易语言适配）
        run: |
          $defPath = "$env:TELEGRAM_DIR\tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force
          Write-Host "生成.def文件：$defPath"

      - name: 修改td/telegram/CMakeLists.txt
        run: |
          $content = Get-Content $env:CMAKE_PATH -Raw
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          $content = $content -replace 'add_library\(tdjson SHARED .*\)', @"
          add_library(tdjson SHARED
              `$<TARGET_OBJECTS:tdjson_objects>
              td_json_client.cpp
              $env:TELEGRAM_DIR\tdjson.def
          )
          target_link_options(tdjson PRIVATE "/DEF:`${CMAKE_CURRENT_SOURCE_DIR}/tdjson.def")
          "@
          $content | Set-Content $env:CMAKE_PATH -Force

      - name: 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --no-print-usage

      - name: 配置编译
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release ..

      - name: 编译DLL
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 验证并上传
        run: |
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          if (Test-Path $dllPath) {
            Write-Host "✅ 编译成功：$dllPath"
          } else {
            throw "❌ DLL未生成"
          }

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-easy-ultimate
          path: ${{ env.BUILD_DIR }}/Release/*.dll
