name: Build tdjson.dll (Force Stdcall Export)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: 'C:\vcpkg'
      BUILD_DIR: 'build32'
      VCPKG_TAG: '2024.09.12'

    steps:
      - name: 检出TDLib源码
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: 缓存vcpkg依赖
        uses: actions/cache@v3
        id: cache-vcpkg
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/downloads
          key: vcpkg-x86-force-${{ env.VCPKG_TAG }}

      - name: 安装依赖
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout tags/$env:VCPKG_TAG
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl[core]:x86-windows zlib:x86-windows --clean-after-build
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows

      - name: 缓存编译产物
        uses: actions/cache@v3
        id: cache-build
        with:
          path: ${{ env.BUILD_DIR }}
          key: tdjson-force-${{ github.sha }}

      - name: 配置+编译（只为tdjson目标启用stdcall）
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # 关键：1. 传递导出宏 2. 只为Release模式的C/CXX启用/Gz（仅作用于编译的tdjson目标）
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release `
            -DTD_JSON_CLIENT_API="__declspec(dllexport) __stdcall" `  # 显式指定导出宏
            -DCMAKE_CXX_FLAGS_Release="/Gz" `  # 仅Release模式C++代码用stdcall
            -DCMAKE_C_FLAGS_Release="/Gz" `    # 仅Release模式C代码用stdcall
            ..
          # 只编译tdjson目标（不编译其他冲突目标，如tl-parser）
          cmake --build . --config Release --parallel 4 --target tdjson --verbose
        timeout-minutes: 45

      - name: 强制验证stdcall（无@后缀则失败）
        run: |
          $dumpbin = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\dumpbin.exe"
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          
          if (-not (Test-Path $dllPath)) { throw "tdjson.dll未生成" }
          
          # 提取td_json_client_系列函数的导出信息
          $exportLines = & $dumpbin /exports $dllPath | Select-String -Pattern "td_json_client_"
          if (-not $exportLines) { throw "未找到核心导出函数" }
          
          # 检查是否有@数字后缀（stdcall标志）
          $stdcallCount = ($exportLines | Select-String -Pattern "@\d+").Count
          if ($stdcallCount -eq 0) {
            throw "❌ 导出函数无@后缀，stdcall未生效！导出信息：`n$exportLines"
          } else {
            Write-Host "✅ 成功！$stdcallCount 个核心函数带@后缀（stdcall生效）：`n$exportLines"
          }

      - name: 复制依赖DLL
        run: |
          $vcpkgBin = "${{ env.VCPKG_ROOT }}\installed\x86-windows\bin"
          $outputDir = "$env:BUILD_DIR\Release"
          Copy-Item "$vcpkgBin\libcrypto-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\libssl-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\zlib1.dll" -Destination $outputDir -Force

      - name: 上传验证通过的产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-win32-stdcall-validated
          path: ${{ env.BUILD_DIR }}/Release/*.dll
