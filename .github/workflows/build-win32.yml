name: Build Win32 tdjson.dll (EasierLanguage Compatible)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: 'C:\vcpkg'
      BUILD_DIR: 'build32'
      VCPKG_TAG: '2024.09.12'

    steps:
      - name: 检出TDLib源码（含子模块）
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'  # 确保根目录有CMakeLists.txt

      - name: 缓存vcpkg依赖
        uses: actions/cache@v3
        id: cache-vcpkg
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/downloads
          key: vcpkg-x86-${{ env.VCPKG_TAG }}-${{ hashFiles('**/vcpkg.json') }}

      - name: 安装gperf工具
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: choco install gperf -y

      - name: 初始化vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout tags/$env:VCPKG_TAG
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"

      - name: 安装32位依赖
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: vcpkg install openssl[core]:x86-windows zlib:x86-windows --clean-after-build
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows

      - name: 缓存CMake构建产物
        uses: actions/cache@v3
        id: cache-build
        with:
          path: ${{ env.BUILD_DIR }}
          key: cmake-build-win32-${{ github.sha }}
          restore-keys: cmake-build-win32-

      - name: 配置+编译tdjson.dll（修复源码路径传递）
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # 关键：将".."作为CMake参数直接拼接，避免换行解析错误
          cmake -G "Visual Studio 17 2022" -A Win32 -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release "-DTD_JSON_CLIENT_API=__declspec(dllexport) __stdcall" ..
          cmake --build . --config Release --parallel 4
        timeout-minutes: 30

      - name: 验证tdjson.dll生成
        run: |
          if (-not (Test-Path "$env:BUILD_DIR\Release\tdjson.dll")) {
            throw "tdjson.dll未生成"
          }

      - name: 复制依赖DLL
        run: |
          $vcpkgBin = "${{ env.VCPKG_ROOT }}\installed\x86-windows\bin"
          $outputDir = "$env:BUILD_DIR\Release"
          Copy-Item "$vcpkgBin\libcrypto-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\libssl-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\zlib1.dll" -Destination $outputDir -Force

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-win32-stdcall
          path: ${{ env.BUILD_DIR }}/Release/*.dll
