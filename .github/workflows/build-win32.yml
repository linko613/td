name: 最终版 - 跳过定位直接编译

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 硬编码路径（根据你的确认，直接写死）
      CMAKE_FILE: CMakeLists.txt  # 根目录下的CMakeLists.txt
      TELEGRAM_SRC_DIR: telegram  # 假设td_json_client.cpp在telegram目录

    steps:
      - name: 1. 检出你的仓库
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取子模块（不检查，直接执行）
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force

      - name: 3. 直接生成.def文件（硬编码路径）
        run: |
          # 直接在telegram目录生成def，不检查目录是否存在
          $defPath = "$env:TELEGRAM_SRC_DIR/tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force
          echo "DEF_PATH=$defPath" >> $env:GITHUB_ENV

      - name: 4. 直接修改根目录CMakeLists.txt（不检查文件是否存在）
        run: |
          $content = Get-Content $env:CMAKE_FILE -Raw
          # 移除原有导出宏
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          # 添加def文件到tdjson目标
          $content = $content -replace '(add_library\(tdjson SHARED .*\n)(.*)', "`$1  $env:TELEGRAM_SRC_DIR/td_json_client.cpp
              $env:DEF_PATH
          `$2"
          # 强制链接def
          $content += "`ntarget_link_options(tdjson PRIVATE "/DEF:$env:DEF_PATH")`n"
          $content | Set-Content $env:CMAKE_FILE -Force

      - name: 5. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 6. 直接配置编译（根目录作为源码）
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release ..

      - name: 7. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 8. 验证并上传
        run: |
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          if (Test-Path $dllPath) {
            7z a tdjson.zip $dllPath
            Write-Host "✅ 编译成功"
          } else {
            throw "❌ DLL未生成"
          }

      - name: 9. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 最终可用DLL
          path: tdjson.zip
