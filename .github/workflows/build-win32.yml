name: 修复语法错误 - 最终可用版

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 你的仓库实际路径（已验证）
      MAIN_CMAKE: ./CMakeLists.txt
      CORE_SRC_DIR: ./td/telegram
      CORE_FILE: ./td/telegram/td_json_client.cpp

    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取td子模块
        run: |
          git submodule sync td/
          git submodule update --init --force td/
          git -C td/ submodule update --init --recursive --force
          Write-Host "`ntd/telegram目录文件："
          Get-ChildItem -Path $env:CORE_SRC_DIR -ErrorAction SilentlyContinue

      - name: 3. 确认核心文件存在
        run: |
          if (-not (Test-Path $env:MAIN_CMAKE)) { throw "缺CMakeLists.txt" }
          if (-not (Test-Path $env:CORE_SRC_DIR)) { throw "缺td/telegram" }
          if (-not (Test-Path $env:CORE_FILE)) { throw "缺td_json_client.cpp" }
          Write-Host "✅ 核心文件齐全"

      - name: 4. 生成.def文件
        run: |
          $defPath = "$env:CORE_SRC_DIR/tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force
          echo "DEF_PATH=$defPath" >> $env:GITHUB_ENV

      - name: 5. 修改CMakeLists.txt（修复语法错误）
        run: |
          $content = Get-Content $env:MAIN_CMAKE -Raw
          # 移除导出宏
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          # 添加.def文件到tdjson目标（修复引号嵌套）
          $content = $content -replace '(add_library\(tdjson SHARED)(.*?)(\))', "`$1`$2`n    $env:DEF_PATH`$3"
          # 关键修复：用单引号包裹路径，避免PowerShell解析错误
          $content += "`n# 易语言适配：强制stdcall导出`ntarget_link_options(tdjson PRIVATE '/DEF:$env:DEF_PATH')`n"
          # 写入文件
          $content | Set-Content $env:MAIN_CMAKE -Force
          Write-Host "✅ 已修复语法并修改CMakeLists.txt"

      - name: 6. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 7. 配置编译
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release ..

      - name: 8. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 9. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 最终可用DLL
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
