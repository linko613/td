name: 修复LNK2001错误 - 最终可用版

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      MAIN_CMAKE: ./CMakeLists.txt
      # 核心源码文件（必须编译的实现文件）
      CORE_SRC_FILE: ./td/telegram/td_json_client.cpp
      CORE_SRC_DIR: ./td/telegram

    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取子模块
        run: |
          git submodule sync td/
          git submodule update --init --force td/
          git -C td/ submodule update --init --recursive --force

      - name: 3. 生成.def文件（确保函数名匹配）
        run: |
          $absCoreDir = (Resolve-Path $env:CORE_SRC_DIR).Path -replace '\\', '/'
          $defPath = "$absCoreDir/tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force
          echo "DEF_CMAKE_PATH=$defPath" >> $env:GITHUB_ENV

      - name: 4. 修改CMakeLists.txt（关键：强制包含实现文件）
        run: |
          $content = Get-Content $env:MAIN_CMAKE -Raw
          # 1. 确保td_json_client.cpp被编译（核心修复）
          $coreSrcAbs = (Resolve-Path $env:CORE_SRC_FILE).Path -replace '\\', '/'
          # 2. 修复add_library，明确包含实现文件和.def
          $content = $content -replace '(add_library\(tdjson SHARED)(.*?)(\))', "`$1`$2`n    $coreSrcAbs`n    $env:DEF_CMAKE_PATH`$3"
          # 3. 强制函数调用约定为stdcall（匹配易语言）
          $content = $content -replace 'td_json_client_create', '__declspec(dllexport) void* __stdcall td_json_client_create'
          $content = $content -replace 'td_json_client_destroy', '__declspec(dllexport) void __stdcall td_json_client_destroy'
          $content = $content -replace 'td_json_client_send', '__declspec(dllexport) void __stdcall td_json_client_send'
          $content = $content -replace 'td_json_client_receive', '__declspec(dllexport) const char* __stdcall td_json_client_receive'
          $content = $content -replace 'td_json_client_execute', '__declspec(dllexport) const char* __stdcall td_json_client_execute'
          # 4. 链接器选项
          $content += "`ntarget_link_options(tdjson PRIVATE /DEF:`"$env:DEF_CMAKE_PATH`")`n"
          $content | Set-Content $env:MAIN_CMAKE -Force
          Write-Host "✅ 已强制包含实现文件和调用约定"

      - name: 5. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 6. 配置编译
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release ..

      - name: 7. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 8. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 最终可用DLL（修复LNK2001）
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
