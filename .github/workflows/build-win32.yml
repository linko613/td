name: 编译易语言可用的32位tdjson.dll（带stdcall）

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      DUMPBIN_PATH: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\dumpbin.exe

    steps:
      - name: 检出TDLib源码（带完整子模块）
        uses: actions/checkout@v4
        with:
          repository: tdlib/td
          submodules: recursive  # 必须带子模块，否则缺核心文件
          fetch-depth: 1

      - name: 定位关键文件（避免路径错误）
        run: |
          # 递归搜索telegram模块的CMakeLists.txt
          $cmakePath = (Get-ChildItem -Path . -Recurse -Filter "CMakeLists.txt" | Where-Object { $_.FullName -match "telegram" } | Select-Object -First 1).FullName
          if (-not $cmakePath) { throw "未找到telegram模块的CMakeLists.txt" }
          $telegramDir = Split-Path $cmakePath -Parent
          echo "CMAKE_PATH=$cmakePath" >> $env:GITHUB_ENV
          echo "TELEGRAM_DIR=$telegramDir" >> $env:GITHUB_ENV
          Write-Host "找到核心目录：$telegramDir"

      - name: 生成易语言兼容的.def文件（强制stdcall）
        run: |
          # .def文件是易语言调用的关键，强制导出带@后缀的函数
          $defPath = "$env:TELEGRAM_DIR\tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0                ; 无参数（易语言整数型返回）
              td_json_client_destroy@4               ; 1个整数型参数（client）
              td_json_client_send@8                  ; 2个整数型参数（client, request）
              td_json_client_receive@12              ; 2个参数（client, timeout）
              td_json_client_execute@8               ; 2个参数（client, request）
          "@ | Set-Content $defPath -Force
          Write-Host "生成.def文件：$defPath"
          echo "DEF_PATH=$defPath" >> $env:GITHUB_ENV

      - name: 修改CMake配置（确保.def生效）
        run: |
          $content = Get-Content $env:CMAKE_PATH -Raw
          # 移除原有导出宏，仅保留.def导出
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          # 强制链接.def文件
          $content = $content -replace 'add_library\(tdjson SHARED .*\)', @"
          add_library(tdjson SHARED
              `$<TARGET_OBJECTS:tdjson_objects>
              td_json_client.cpp
              $($env:DEF_PATH)
          )
          target_link_options(tdjson PRIVATE "/DEF:`${CMAKE_CURRENT_SOURCE_DIR}/tdjson.def")
          "@
          $content | Set-Content $env:CMAKE_PATH -Force

      - name: 安装32位依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --no-print-usage

      - name: 配置32位编译环境
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # 明确指定32位架构（Win32）
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release ..

      - name: 编译32位DLL
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 验证易语言兼容性（必须带@后缀）
        run: |
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          if (-not (Test-Path $dllPath)) { throw "DLL未生成" }
          
          # 检查导出函数是否带@后缀（易语言stdcall要求）
          $exports = & "$env:DUMPBIN_PATH" /exports $dllPath | Select-String "td_json_client_"
          $hasStdcall = $exports | Select-String "@\d+" -Quiet
          if (-not $hasStdcall) {
            throw "❌ 导出函数不符合易语言要求！缺少@后缀：`n$exports"
          } else {
            Write-Host "✅ 生成易语言兼容的DLL！导出函数：`n$exports"
          }

      - name: 上传易语言专用DLL
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-32bit-for-easy-language
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
