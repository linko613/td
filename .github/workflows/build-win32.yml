name: Build tdjson.dll (stdcall with @ suffix)

on:
  workflow_dispatch:  # 手动触发，方便测试

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: 'C:\vcpkg'
      BUILD_DIR: 'build32'
      VCPKG_TAG: '2024.09.12'

    steps:
      - name: 检出TDLib源码（含子模块）
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: 缓存vcpkg依赖
        uses: actions/cache@v3
        id: cache-vcpkg
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/downloads
          key: vcpkg-x86-stdcall-${{ env.VCPKG_TAG }}

      - name: 安装依赖工具
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout tags/$env:VCPKG_TAG
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl[core]:x86-windows zlib:x86-windows --clean-after-build
        env:
          VCPKG_DEFAULT_TRIPLET: x86-windows

      - name: 缓存编译产物
        uses: actions/cache@v3
        id: cache-build
        with:
          path: ${{ env.BUILD_DIR }}
          key: tdjson-stdcall-${{ github.sha }}

      - name: 配置+编译（强制stdcall导出）
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # 核心：双保险强制stdcall（宏定义+编译器选项）
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release `
            # 1. TDLib导出宏显式指定stdcall
            -DTD_JSON_CLIENT_API="__declspec(dllexport) __stdcall" `
            # 2. 编译器全局强制stdcall（覆盖所有函数）
            -DCMAKE_C_FLAGS="/Gz" `
            -DCMAKE_CXX_FLAGS="/Gz" `
            ..
          # 编译并启用详细输出，方便排查问题
          cmake --build . --config Release --parallel 4 --verbose
        timeout-minutes: 45

      - name: 验证导出函数是否带@后缀（关键检查）
        run: |
          # 使用dumpbin工具检查tdjson.dll的导出函数
          $dumpbin = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\dumpbin.exe"
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          
          if (-not (Test-Path $dllPath)) {
            throw "tdjson.dll未找到"
          }
          
          # 执行dumpbin并检查是否有@数字后缀
          $output = & $dumpbin /exports $dllPath
          $hasStdcall = $output | Select-String -Pattern "td_json_client_send@\d+" -Quiet
          
          if (-not $hasStdcall) {
            throw "导出函数未使用stdcall（无@后缀），编译失败"
          } else {
            Write-Host "✅ 验证成功：导出函数带@后缀（stdcall生效）"
          }

      - name: 复制依赖DLL
        run: |
          $vcpkgBin = "${{ env.VCPKG_ROOT }}\installed\x86-windows\bin"
          $outputDir = "$env:BUILD_DIR\Release"
          Copy-Item "$vcpkgBin\libcrypto-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\libssl-3.dll" -Destination $outputDir -Force
          Copy-Item "$vcpkgBin\zlib1.dll" -Destination $outputDir -Force

      - name: 上传验证通过的产物
        uses: actions/upload-artifact@v4
        with:
          name: tdjson-win32-stdcall-validated
          path: ${{ env.BUILD_DIR }}/Release/*.dll
