name: 只认核心文件 - 彻底解决路径问题

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 核心文件：生成tdjson.dll必须有这个文件，不管在哪个目录
      CORE_FILE: td_json_client.cpp

    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取子模块
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --force

      - name: 3. 搜索核心文件td_json_client.cpp（不管目录名）
        run: |
          Write-Host "`n===== 开始搜索核心文件$env:CORE_FILE ====="
          $coreFilePath = (Get-ChildItem -Path . -Recurse -Filter $env:CORE_FILE | Select-Object -First 1).FullName
          
          if (-not $coreFilePath) {
            throw "❌ 仓库中找不到$env:CORE_FILE！这是生成tdjson.dll的必须文件，请确认仓库完整"
          }
          
          # 提取核心文件所在目录（不管叫什么名字）
          $coreDir = Split-Path $coreFilePath -Parent
          Write-Host "✅ 找到核心文件：$coreFilePath"
          Write-Host "核心文件所在目录：$coreDir"
          
          # 保存路径（不关心目录名，只认实际位置）
          echo "CORE_DIR=$coreDir" >> $env:GITHUB_ENV
          echo "CORE_FILE_PATH=$coreFilePath" >> $env:GITHUB_ENV

      - name: 4. 搜索主CMakeLists.txt（生成项目必须）
        run: |
          Write-Host "`n===== 开始搜索主CMakeLists.txt ====="
          $cmakePath = (Get-ChildItem -Path . -Recurse -Filter "CMakeLists.txt" | Where-Object { 
            # 简单判断：包含add_library(tdjson的CMake才是目标
            (Get-Content $_.FullName -Raw) -match "add_library\(tdjson" 
          } | Select-Object -First 1).FullName
          
          if (-not $cmakePath) {
            \# 退而求其次：找根目录的CMakeLists.txt
            $cmakePath = (Get-ChildItem -Path . -Filter "CMakeLists.txt" | Select-Object -First 1).FullName
          }
          
          if (-not $cmakePath) {
            throw "❌ 找不到CMakeLists.txt，无法编译"
          }
          
          Write-Host "✅ 找到主CMakeLists.txt：$cmakePath"
          echo "CMAKE_PATH=$cmakePath" >> $env:GITHUB_ENV

      - name: 5. 在核心文件目录生成.def文件（不关心目录名）
        run: |
          $defPath = "$env:CORE_DIR/tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force
          echo "DEF_PATH=$defPath" >> $env:GITHUB_ENV
          Write-Host "生成.def文件：$defPath"

      - name: 6. 修改找到的CMakeLists.txt
        run: |
          $content = Get-Content $env:CMAKE_PATH -Raw
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          $content = $content -replace '(add_library\(tdjson SHARED)(.*?)(\))', "`$1`$2`n    $env:DEF_PATH`$3"
          $content += "`ntarget_link_options(tdjson PRIVATE "/DEF:$env:DEF_PATH")`n"
          $content | Set-Content $env:CMAKE_PATH -Force
          Write-Host "修改CMakeLists.txt：$env:CMAKE_PATH"

      - name: 7. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 8. 配置编译（基于找到的CMake路径）
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # CMakeLists.txt所在目录作为源码目录
          $cmakeDir = Split-Path $env:CMAKE_PATH -Parent
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release `
            $cmakeDir  # 直接指向CMake所在目录

      - name: 9. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 10. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 最终DLL
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
