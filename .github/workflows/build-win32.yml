name: 基于linko613/td实际结构 - 易语言DLL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 从你的仓库实际结构获取的路径（直接查看仓库确认）
      MAIN_CMAKE: ./CMakeLists.txt  # 仓库根目录的CMakeLists.txt
      CORE_SRC_DIR: ./td/telegram   # 仓库中实际的telegram源码目录（存在）
      CORE_FILE: ./td/telegram/td_json_client.cpp  # 核心文件实际位置

    steps:
      - name: 1. 检出你的仓库（linko613/td）
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive  # 必须拉取子模块，td/telegram依赖子模块
          fetch-depth: 0
          lfs: true

      - name: 2. 强制拉取td子模块（你的仓库td目录是子模块）
        run: |
          # 你的仓库中td是子模块，必须单独强制拉取
          git submodule sync td/
          git submodule update --init --force td/
          # 拉取td子模块内部的依赖（包括telegram目录的文件）
          git -C td/ submodule update --init --recursive --force
          # 打印td/telegram目录实际文件（证明存在）
          Write-Host "`n===== 你的仓库td/telegram目录实际文件 ====="
          Get-ChildItem -Path $env:CORE_SRC_DIR -ErrorAction SilentlyContinue | Select-Object Name

      - name: 3. 确认核心文件存在（根据仓库结构）
        run: |
          # 检查主CMakeLists.txt
          if (-not (Test-Path $env:MAIN_CMAKE)) {
            throw "❌ 仓库根目录找不到CMakeLists.txt（实际路径：$env:MAIN_CMAKE）"
          }
          # 检查td/telegram目录
          if (-not (Test-Path $env:CORE_SRC_DIR)) {
            throw "❌ 找不到td/telegram目录（实际路径：$env:CORE_SRC_DIR），子模块拉取失败"
          }
          # 检查核心文件td_json_client.cpp
          if (-not (Test-Path $env:CORE_FILE)) {
            throw "❌ 找不到$env:CORE_FILE，子模块未拉取完整"
          }
          Write-Host "✅ 所有核心文件和目录均存在"

      - name: 4. 在td/telegram目录生成.def文件
        run: |
          $defPath = "$env:CORE_SRC_DIR/tdjson.def"
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content $defPath -Force
          echo "DEF_PATH=$defPath" >> $env:GITHUB_ENV

      - name: 5. 修改根目录CMakeLists.txt（你的仓库根目录）
        run: |
          $content = Get-Content $env:MAIN_CMAKE -Raw
          $content = $content -replace 'TD_JSON_CLIENT_API', ''
          $content = $content -replace '(add_library\(tdjson SHARED)(.*?)(\))', "`$1`$2`n    $env:DEF_PATH`$3"
          $content += "`ntarget_link_options(tdjson PRIVATE "/DEF:$env:DEF_PATH")`n"
          $content | Set-Content $env:MAIN_CMAKE -Force

      - name: 6. 安装依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 7. 配置编译（指向仓库根目录）
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release ..  # 根目录是CMakeLists.txt所在目录

      - name: 8. 编译tdjson.dll
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --target tdjson --parallel 4 --verbose

      - name: 9. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: linko613-td-最终可用DLL
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
