name: 绕过项目依赖 - 直接编译核心DLL

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      BUILD_DIR: build32
      # 核心文件（直接指定，不依赖项目其他部分）
      CORE_SRC: td/telegram/td_json_client.cpp
      CORE_H: td/telegram/td_json_client.h
      DEF_FILE: tdjson.def

    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          repository: linko613/td
          submodules: recursive
          fetch-depth: 0

      - name: 2. 强制拉取子模块（确保核心文件存在）
        run: |
          git submodule sync td/
          git submodule update --init --force td/
          git -C td/ submodule update --init --recursive --force
          # 确认核心文件存在
          if (-not (Test-Path $env:CORE_SRC)) { throw "缺$env:CORE_SRC" }
          if (-not (Test-Path $env:CORE_H)) { throw "缺$env:CORE_H" }

      - name: 3. 准备独立编译环境（不依赖项目CMake）
        run: |
          mkdir -p $env:BUILD_DIR
          cd $env:BUILD_DIR
          # 创建独立的CMakeLists.txt，只编译核心文件
          @"
          cmake_minimum_required(VERSION 3.15)
          project(tdjson)
          set(CMAKE_CXX_STANDARD 17)
          set(CMAKE_BUILD_TYPE Release)
          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_SYSTEM_PROCESSOR x86)

          # 引入TDLib必要的依赖
          find_package(OpenSSL REQUIRED)
          find_package(ZLIB REQUIRED)

          # 核心源码
          add_library(tdjson SHARED
              ../$env:CORE_SRC
              ../$env:DEF_FILE
          )

          # 头文件路径
          target_include_directories(tdjson PRIVATE
              ../td
              ../td/tdutils
              ../td/td/generate/auto
              $ENV{VCPKG_ROOT}/installed/x86-windows/include
          )

          # 链接依赖库
          target_link_libraries(tdjson PRIVATE
              OpenSSL::SSL
              OpenSSL::Crypto
              ZLIB::ZLIB
              ws2_32
              Mswsock
              Crypt32
          )

          # 强制导出和调用约定
          target_compile_definitions(tdjson PRIVATE
              _WINDLL
              NOMINMAX
              WIN32_LEAN_AND_MEAN
          )
          target_link_options(tdjson PRIVATE
              /DEF:../$env:DEF_FILE
              /MACHINE:X86
          )
          "@ | Set-Content CMakeLists.txt -Force

      - name: 4. 生成专用.def文件（确保符号匹配）
        run: |
          cd $env:BUILD_DIR
          @"
          LIBRARY tdjson.dll
          EXPORTS
              td_json_client_create@0
              td_json_client_destroy@4
              td_json_client_send@8
              td_json_client_receive@12
              td_json_client_execute@8
          "@ | Set-Content ../$env:DEF_FILE -Force

      - name: 5. 修改核心头文件（强制导出）
        run: |
          $hContent = Get-Content $env:CORE_H -Raw
          # 添加导出宏和stdcall
          $hContent = $hContent -replace 'typedef struct td_json_client td_json_client;', @"
          typedef struct td_json_client td_json_client;
          #define TD_JSON_EXPORT __declspec(dllexport) __stdcall
          "@
          # 重定义函数声明
          $hContent = $hContent -replace 'td_json_client \*td_json_client_create\(\);', 'TD_JSON_EXPORT td_json_client *td_json_client_create();'
          $hContent = $hContent -replace 'void td_json_client_destroy\(td_json_client \*client\);', 'TD_JSON_EXPORT void td_json_client_destroy(td_json_client *client);'
          $hContent = $hContent -replace 'void td_json_client_send\(td_json_client \*client, const char \*request\);', 'TD_JSON_EXPORT void td_json_client_send(td_json_client *client, const char *request);'
          $hContent = $hContent -replace 'const char \*td_json_client_receive\(td_json_client \*client, double timeout\);', 'TD_JSON_EXPORT const char *td_json_client_receive(td_json_client *client, double timeout);'
          $hContent = $hContent -replace 'const char \*td_json_client_execute\(td_json_client \*client, const char \*request\);', 'TD_JSON_EXPORT const char *td_json_client_execute(td_json_client *client, const char *request);'
          $hContent | Set-Content $env:CORE_H -Force

      - name: 6. 安装32位依赖
        run: |
          choco install gperf -y
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          git -C $env:VCPKG_ROOT checkout 2024.09.12
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          vcpkg install openssl:x86-windows zlib:x86-windows --clean-after-build

      - name: 7. 独立配置编译（不依赖项目原有CMake）
        run: |
          cd $env:BUILD_DIR
          cmake -G "Visual Studio 17 2022" -A Win32 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            .

      - name: 8. 编译tdjson.dll（只编译核心文件）
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config Release --parallel 4 --verbose

      - name: 9. 验证导出符号
        run: |
          $dllPath = "$env:BUILD_DIR\Release\tdjson.dll"
          if (-not (Test-Path $dllPath)) { throw "DLL未生成" }
          $dumpbin = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx86\x86\dumpbin.exe"
          & $dumpbin /exports $dllPath | Select-String "td_json_client_"

      - name: 10. 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: 独立编译成功DLL
          path: ${{ env.BUILD_DIR }}/Release/tdjson.dll
